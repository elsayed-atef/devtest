param (
    [string]$ConfigFile = "D:\data\housekeeping_config.xml",
    [switch]$Parallel,
    [switch]$DryRun,
    [string]$LogFile = "D:\data\temp\housekeeping.log"
)

# Global lock object for logging
$global:logLock = [System.Object]::new()

# Function to write logs
function Write-Log {
    param (
        [string]$Message,
        [string]$Level = "INFO",
        [string]$LogFile
    )

    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "$timestamp [$Level] $Message"

    [System.Threading.Monitor]::Enter($global:logLock)
    try {
        Add-Content -Path $LogFile -Value $logMessage -ErrorAction Stop
    } finally {
        [System.Threading.Monitor]::Exit($global:logLock)
    }
}

# Import the XML configuration
[xml]$xmlConfig = Get-Content $ConfigFile

# Process each path configuration
foreach ($pathConfig in $xmlConfig.Housekeeping.Paths.Path) {
    $path = $pathConfig.Path
    $enabled = $pathConfig.Enabled -eq "true"
    $includeSubfolders = [bool]$pathConfig.IncludeSubfolders
    $excludePatterns = $pathConfig.ExcludePatterns.Pattern
    $retentionDays = [int]$pathConfig.RetentionDays
    $archiveBeforeDelete = [bool]$pathConfig.ArchiveBeforeDelete
    $archivePath = $pathConfig.ArchivePath

    Write-Log "Processing path: $path" -Level "DEBUG" -LogFile $LogFile
    Write-Log "Enabled flag for $path is set to $enabled" -Level "DEBUG" -LogFile $LogFile

    if (-not $enabled) {
        Write-Log "Skipping disabled rule for path: $path" -Level "INFO" -LogFile $LogFile
        continue
    }

    if ($Parallel) {
        Start-Job -ScriptBlock {
            param (
                $Path,
                $IncludeSubfolders,
                $ExcludePatterns,
                $RetentionDays,
                $ArchiveBeforeDelete,
                $ArchivePath,
                $DryRun,
                $LogFile
            )

            . "D:\scripts\Perform-Cleanup.ps1" -Path $Path -IncludeSubfolders $IncludeSubfolders `
                                                -ExcludePatterns $ExcludePatterns `
                                                -RetentionDays $RetentionDays `
                                                -ArchiveBeforeDelete $ArchiveBeforeDelete `
                                                -ArchivePath $ArchivePath `
                                                -DryRun $DryRun `
                                                -LogFile $LogFile
        } -ArgumentList $path, $includeSubfolders, $excludePatterns, $retentionDays, $archiveBeforeDelete, $archivePath, $DryRun, $LogFile
    } else {
        . "D:\scripts\Perform-Cleanup.ps1" -Path $path -IncludeSubfolders $includeSubfolders `
                                            -ExcludePatterns $excludePatterns `
                                            -RetentionDays $retentionDays `
                                            -ArchiveBeforeDelete $archiveBeforeDelete `
                                            -ArchivePath $archivePath `
                                            -DryRun $DryRun `
                                            -LogFile $LogFile
    }
}

# Wait for all parallel jobs to complete
if ($Parallel) {
    Get-Job | ForEach-Object {
        try {
            $jobResult = Wait-Job -Job $_ -ErrorAction Stop | Receive-Job -ErrorAction Stop
            Write-Log "Job completed successfully: $($_.Id)" -Level "INFO" -LogFile $LogFile
            $jobResult
        } catch {
            Write-Log "Failed to complete job $_. Error: $_" -Level "ERROR" -LogFile $LogFile
        } finally {
            Remove-Job -Job $_ -ErrorAction SilentlyContinue
        }
    }
}

Write-Log "Housekeeping completed." -Level "INFO" -LogFile $LogFile
