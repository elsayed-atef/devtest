param (
    [string]$ConfigFile = "D:\data\housekeeping_config.xml",
    [switch]$Parallel,
    [switch]$DryRun,
    [string]$LogFile = "D:\data\temp\housekeeping.log"
)

# Global lock object for logging
$global:logLock = [System.Object]::new()

# Function to write logs
function Write-Log {
    param (
        [string]$Message,
        [string]$Level = "INFO",
        [string]$LogFile
    )

    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "$timestamp [$Level] $Message"

    [System.Threading.Monitor]::Enter($global:logLock)
    try {
        Add-Content -Path $LogFile -Value $logMessage -ErrorAction Stop
    } finally {
        [System.Threading.Monitor]::Exit($global:logLock)
    }
}

# Import the XML configuration
[xml]$xmlConfig = Get-Content $ConfigFile

$jobs = @()

# Process each path configuration
foreach ($pathConfig in $xmlConfig.Housekeeping.Paths.Path) {
    $path = $pathConfig.Path
    $enabled = $pathConfig.Enabled -eq "true"
    $includeSubfolders = [bool]$pathConfig.IncludeSubfolders
    $excludePatterns = $pathConfig.ExcludePatterns.Pattern
    $retentionDays = [int]$pathConfig.RetentionDays
    $archiveBeforeDelete = [bool]$pathConfig.ArchiveBeforeDelete
    $archivePath = $pathConfig.ArchivePath

    Write-Log "Processing path: $path" -Level "DEBUG" -LogFile $LogFile
    Write-Log "Enabled flag for $path is set to $enabled" -Level "DEBUG" -LogFile $LogFile

    if (-not $enabled) {
        Write-Log "Skipping disabled rule for path: $path" -Level "INFO" -LogFile $LogFile
        continue
    }

    if ($Parallel) {
        $job = Start-Job -FilePath "D:\scripts\Perform-Cleanup.ps1" -ArgumentList $path, $includeSubfolders, $excludePatterns, $retentionDays, $archiveBeforeDelete, $archivePath, $DryRun, $LogFile
        $jobs += $job
    } else {
        & "D:\scripts\Perform-Cleanup.ps1" -Path $path -IncludeSubfolders $includeSubfolders `
                                            -ExcludePatterns $excludePatterns `
                                            -RetentionDays $retentionDays `
                                            -ArchiveBeforeDelete $archiveBeforeDelete `
                                            -ArchivePath $archivePath `
                                            -DryRun $DryRun `
                                            -LogFile $LogFile
    }
}

# Heapdump cleanup
$heapdumpConfig = $xmlConfig.Housekeeping.Heapdump
$heapdumpPath = $heapdumpConfig.Path
$heapdumpRetentionDays = [int]$heapdumpConfig.RetentionDays

if ($heapdumpConfig.Enabled -eq "true") {
    Write-Log "Performing heapdump cleanup for path: $heapdumpPath with retention period: $heapdumpRetentionDays days." -Level "INFO" -LogFile $LogFile
    & "D:\scripts\Perform-Cleanup.ps1" -Path $heapdumpPath -IncludeSubfolders $false `
                                        -ExcludePatterns @() `
                                        -RetentionDays $heapdumpRetentionDays `
                                        -ArchiveBeforeDelete $false `
                                        -ArchivePath "" `
                                        -DryRun $DryRun `
                                        -LogFile $LogFile
}

# Wait for all jobs to finish and merge logs
if ($Parallel) {
    if ($jobs.Count -gt 0) {
        $jobs | ForEach-Object {
            try {
                $jobResult = Wait-Job -Job $_ -ErrorAction Stop | Receive-Job -ErrorAction Stop
                Write-Log "Job completed successfully: $($_.Id)" -Level "INFO" -LogFile $LogFile
                $jobResult
            } catch {
                Write-Log "Failed to complete job $_. Error: $_" -Level "ERROR" -LogFile $LogFile
            } finally {
                Remove-Job -Job $_ -ErrorAction SilentlyContinue
            }
        }
    }
}

Write-Log "Housekeeping completed." -Level "INFO" -LogFile $LogFile
