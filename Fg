# Function to Log Messages with Timestamp and Log Level
function Log-Message {
    param (
        [string]$Level,
        [string]$Message
    )

    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logEntry = "$timestamp [$Level] $Message"
    Write-Output $logEntry
    Add-Content -Path $LogFilePath -Value $logEntry
}

# Function to Test Time Parsing
function Test-TimeParsing {
    param (
        [xml]$config
    )

    $timeRanges = @($config.HousekeepingConfig.Settings.PeakHours.TimeRange.Range)

    foreach ($range in $timeRanges) {
        try {
            $startTime = [datetime]::ParseExact($range.Start, "HH:mm", $null).TimeOfDay
            $endTime = [datetime]::ParseExact($range.End, "HH:mm", $null).TimeOfDay

            # Adjust for time ranges crossing midnight
            if ($endTime -lt $startTime) {
                # Time range crosses midnight
                $currentTime = Get-Date -Format "HH:mm:ss"
                $currentTimeOfDay = [datetime]::ParseExact($currentTime, "HH:mm:ss", $null).TimeOfDay

                if ($currentTimeOfDay -ge $startTime -or $currentTimeOfDay -lt $endTime) {
                    Log-Message -Level "Info" -Message "Current time $currentTimeOfDay is within crossing time range Start=$startTime, End=$endTime"
                } else {
                    Log-Message -Level "Info" -Message "Current time $currentTimeOfDay is outside the crossing time range Start=$startTime, End=$endTime"
                }
            } else {
                # Normal time range
                $currentTime = Get-Date -Format "HH:mm:ss"
                $currentTimeOfDay = [datetime]::ParseExact($currentTime, "HH:mm:ss", $null).TimeOfDay

                if ($currentTimeOfDay -ge $startTime -and $currentTimeOfDay -lt $endTime) {
                    Log-Message -Level "Info" -Message "Current time $currentTimeOfDay is within time range Start=$startTime, End=$endTime"
                } else {
                    Log-Message -Level "Info" -Message "Current time $currentTimeOfDay is outside the time range Start=$startTime, End=$endTime"
                }
            }
        } catch {
            Log-Message -Level "Error" -Message "Failed to parse time: $($_.Exception.Message). Start: $($range.Start), End: $($range.End)"
        }
    }
}

# Main Test Function
function Main {
    # Load XML Configuration
    $config = [xml](Get-Content "HousekeepingConfig.xml")

    # Define LogFilePath for this test
    $LogFilePath = "D:\data\logs\time_parsing_test.log"

    # Test Time Parsing
    Test-TimeParsing -config $config
}

# Run the main test function
Main
