import csv
import socket
from concurrent.futures import ThreadPoolExecutor

def resolve_ip_address(ip_address):
    """
    Resolves a single IP address to its hostname.

    Args:
        ip_address (str): The IP address to resolve.

    Returns:
        str: The resolved hostname or an error message if unsuccessful.
    """
    try:
        return socket.gethostbyaddr(ip_address)[0]
    except socket.herror as e:
        return f"Error resolving {ip_address}: {e}"

def resolve_ip_addresses_parallel(input_file, output_file, num_workers=4):
    """
    Reads a CSV file, resolves IP addresses to hostnames in parallel, and writes the data with a new hostname column.

    Args:
        input_file (str): Path to the input CSV file.
        output_file (str): Path to the output CSV file.
        num_workers (int, optional): Number of worker threads to use for parallel resolution. Defaults to 4.
    """

    with open(input_file, 'r', newline='') as csvfile, open(output_file, 'w', newline='') as outfile:
        reader = csv.reader(csvfile)
        writer = csv.writer(outfile)

        # Get column names and identify the IP address column index
        headers = next(reader)
        ip_column_index = None
        for i, header in enumerate(headers):
            if header.lower() == 'ip address' or header.lower() == 'ip':
                ip_column_index = i
                break

        if ip_column_index is None:
            raise ValueError("Could not find a column named 'IP Address' or 'IP'")

        # Write the header row with the added hostname column
        headers.insert(ip_column_index + 1, 'Hostname')
        writer.writerow(headers)

        # Extract IP addresses and rows for parallel processing
        ip_addresses = []
        rows = []
        for row in reader:
            ip_addresses.append(row[ip_column_index])
            rows.append(row)

        try:
            # Use ThreadPoolExecutor for parallel resolution
            with ThreadPoolExecutor(max_workers=num_workers) as executor:
                resolved_hostnames = list(executor.map(resolve_ip_address, ip_addresses))

            # Write updated data with resolved hostnames
            for row, hostname in zip(rows, resolved_hostnames):
                row.insert(ip_column_index + 1, hostname)
                writer.writerow(row)
        except Exception as e:  # Catch any unexpected errors
            print(f"An error occurred during parallel processing: {e}")

# Example usage
input_file = 'your_data.csv'
output_file = 'data_with_hostnames_parallel_nozip.csv'
num_workers = 8  # Adjust this based on your hardware capabilities

resolve_ip_addresses_parallel(input_file, output_file, num_workers)

print(f"IP address resolution complete (parallel). Output written to: {output_file}")
