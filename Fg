param (
    [string]$ConfigFile = "D:\data\housekeeping_config.xml",
    [switch]$Parallel,
    [switch]$DryRun,
    [string]$LogFile = "D:\data\temp\housekeeping.log"
)

# Function to write logs
function Write-Log {
    param (
        [string]$Message,
        [string]$Level = "INFO",
        [string]$LogFile
    )

    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "$timestamp [$Level] $Message"
    Add-Content -Path $LogFile -Value $logMessage -ErrorAction Stop
}

# Function to perform cleanup
function Perform-Cleanup {
    param (
        [string]$Path,
        [bool]$IncludeSubfolders,
        [string[]]$ExcludePatterns,
        [int]$RetentionDays,
        [bool]$ArchiveBeforeDelete,
        [string]$ArchivePath,
        [switch]$DryRun,
        [string]$LogFile
    )

    Write-Log "Starting cleanup for path: $Path with retention period: $RetentionDays days." -Level "INFO" -LogFile $LogFile

    # Calculate retention date
    $RetentionDate = (Get-Date).AddDays(-$RetentionDays)

    # Get files to delete
    $files = Get-ChildItem -Path $Path -Recurse:$IncludeSubfolders -ErrorAction Stop | 
             Where-Object { $_.LastWriteTime -lt $RetentionDate }

    if ($ExcludePatterns) {
        foreach ($pattern in $ExcludePatterns) {
            Write-Log "Excluding files matching pattern: $pattern" -Level "DEBUG" -LogFile $LogFile
            $files = $files | Where-Object { $_.FullName -notmatch $pattern }
        }
    }

    if ($DryRun) {
        Write-Log "DryRun mode enabled. No files will be deleted or moved." -Level "DEBUG" -LogFile $LogFile
        Write-Log "Files that would be processed:" -Level "DEBUG" -LogFile $LogFile
        $files | ForEach-Object { Write-Log $_.FullName -Level "DEBUG" -LogFile $LogFile }
        return
    }

    # Archive files if required
    if ($ArchiveBeforeDelete -and $ArchivePath) {
        Write-Log "Archiving files before deletion to $ArchivePath." -Level "INFO" -LogFile $LogFile
        foreach ($file in $files) {
            $dest = Join-Path -Path $ArchivePath -ChildPath $file.FullName.TrimStart($Path)
            $destDir = Split-Path $dest
            if (-not (Test-Path $destDir)) {
                New-Item -Path $destDir -ItemType Directory | Out-Null
                Write-Log "Created directory: $destDir" -Level "DEBUG" -LogFile $LogFile
            }
            Move-Item -Path $file.FullName -Destination $dest
            Write-Log "Moved $($file.FullName) to $dest" -Level "DEBUG" -LogFile $LogFile
        }
    }

    # Report before deletion
    $initialSize = ($files | Measure-Object -Property Length -Sum).Sum / 1MB
    Write-Log "Initial size of files to be deleted: $([math]::round($initialSize, 2)) MB" -Level "INFO" -LogFile $LogFile

    # Delete files
    $deletedCount = 0
    foreach ($file in $files) {
        Remove-Item -Path $file.FullName -Force -ErrorAction Stop
        Write-Log "Deleted $($file.FullName)" -Level "DEBUG" -LogFile $LogFile
        $deletedCount++
    }

    # Report after deletion
    Write-Log "Deleted $deletedCount files." -Level "INFO" -LogFile $LogFile
    $finalSize = (Get-ChildItem -Path $Path -Recurse:$IncludeSubfolders -ErrorAction Stop | Measure-Object -Property Length -Sum).Sum / 1MB
    Write-Log "Final size after deletion: $([math]::round($finalSize, 2)) MB" -Level "INFO" -LogFile $LogFile
}

# Import the XML configuration
$xmlConfig = [xml](Get-Content $ConfigFile)

# Sort paths to ensure subfolders are processed before parent folders
$sortedPaths = $xmlConfig.Housekeeping.Paths.Path | Sort-Object -Property { $_.Path.Length } -Descending

$jobs = @()

# Process each path configuration
foreach ($pathConfig in $sortedPaths) {
    $path = $pathConfig.Path
    $enabled = [bool]$pathConfig.Enabled
    $includeSubfolders = [bool]$pathConfig.IncludeSubfolders
    $excludePatterns = $pathConfig.ExcludePatterns.Pattern
    $retentionDays = [int]$pathConfig.RetentionDays
    $archiveBeforeDelete = [bool]$pathConfig.ArchiveBeforeDelete
    $archivePath = $pathConfig.ArchivePath

    # Check if rule is enabled
    if ($enabled -eq $false) {
        Write-Log "Skipping disabled rule for path: $path" -Level "INFO" -LogFile $LogFile
        continue
    }

    $tempLogFile = "$LogFile.$([System.Guid]::NewGuid()).log"
    if ($Parallel) {
        $job = Start-Job -ScriptBlock {
            param (
                $Path,
                $IncludeSubfolders,
                $ExcludePatterns,
                $RetentionDays,
                $ArchiveBeforeDelete,
                $ArchivePath,
                $DryRun,
                $LogFile
            )
            # Include Write-Log function here
            function Write-Log {
                param (
                    [string]$Message,
                    [string]$Level = "INFO",
                    [string]$LogFile
                )

                $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                $logMessage = "$timestamp [$Level] $Message"
                Add-Content -Path $LogFile -Value $logMessage -ErrorAction Stop
            }

            # Include Perform-Cleanup function here
            function Perform-Cleanup {
                param (
                    [string]$Path,
                    [bool]$IncludeSubfolders,
                    [string[]]$ExcludePatterns,
                    [int]$RetentionDays,
                    [bool]$ArchiveBeforeDelete,
                    [string]$ArchivePath,
                    [switch]$DryRun,
                    [string]$LogFile
                )

                Write-Log "Starting cleanup for path: $Path with retention period: $RetentionDays days." -Level "INFO" -LogFile $LogFile

                # Calculate retention date
                $RetentionDate = (Get-Date).AddDays(-$RetentionDays)

                # Get files to delete
                $files = Get-ChildItem -Path $Path -Recurse:$IncludeSubfolders -ErrorAction Stop | 
                         Where-Object { $_.LastWriteTime -lt $RetentionDate }

                if ($ExcludePatterns) {
                    foreach ($pattern in $ExcludePatterns) {
                        Write-Log "Excluding files matching pattern: $pattern" -Level "DEBUG" -LogFile $LogFile
                        $files = $files | Where-Object { $_.FullName -notmatch $pattern }
                    }
                }

                if ($DryRun) {
                    Write-Log "DryRun mode enabled. No files will be deleted or moved." -Level "DEBUG" -LogFile $LogFile
                    Write-Log "Files that would be processed:" -Level "DEBUG" -LogFile $LogFile
                    $files | ForEach-Object { Write-Log $_.FullName -Level "DEBUG" -LogFile $LogFile }
                    return
                }

                # Archive files if required
                if ($ArchiveBeforeDelete -and $ArchivePath) {
                    Write-Log "Archiving files before deletion to $ArchivePath." -Level "INFO" -LogFile $LogFile
                    foreach ($file in $files) {
                        $dest = Join-Path -Path $ArchivePath -ChildPath $file.FullName.TrimStart($Path)
                        $destDir = Split-Path $dest
                        if (-not (Test-Path $destDir)) {
                            New-Item -Path $destDir -ItemType Directory | Out-Null
                            Write-Log "Created directory: $destDir" -Level "DEBUG" -LogFile $LogFile
                        }
                        Move-Item -Path $file.FullName -Destination $dest
                        Write-Log "Moved $($file.FullName) to $dest" -Level "DEBUG" -LogFile $LogFile
                    }
                }

                # Report before deletion
                $initialSize = ($files | Measure-Object -Property Length -Sum).Sum / 1MB
                Write-Log "Initial size of files to be deleted: $([math]::round($initialSize, 2)) MB" -Level "INFO" -LogFile $LogFile

                # Delete files
                $deletedCount = 0
                foreach ($file in $files) {
                    Remove-Item -Path $file.FullName -Force -ErrorAction Stop
                    Write-Log "Deleted $($file.FullName)" -Level "DEBUG" -LogFile $LogFile
                    $deletedCount++
                }

                # Report after deletion
                Write-Log "Deleted $deletedCount files." -Level "INFO" -LogFile $LogFile
                $finalSize = (Get-ChildItem -Path $Path -Recurse:$IncludeSubfolders -ErrorAction Stop | Measure-Object -Property Length -Sum).Sum / 1MB
                Write-Log "Final size after deletion: $([math]::round($finalSize, 2)) MB" -Level "INFO" -LogFile $LogFile
            }

            Perform-Cleanup -Path $Path -IncludeSubfolders $IncludeSubfolders `
                            -ExcludePatterns $ExcludePatterns `
                            -RetentionDays $RetentionDays `
                            -ArchiveBeforeDelete $ArchiveBeforeDelete `
                            -ArchivePath $ArchivePath `
                            -DryRun $DryRun `
                            -LogFile $LogFile
        } -ArgumentList $path, $includeSubfolders, $excludePatterns, $retentionDays, $archiveBeforeDelete, $archivePath, $DryRun, $tempLogFile

        $jobs += $job
    } else {
        Perform-Cleanup -Path $path -IncludeSubfolders $includeSubfolders `
                        -ExcludePatterns $excludePatterns `
                        -RetentionDays $retentionDays `
                        -ArchiveBeforeDelete $archiveBeforeDelete `
                        -ArchivePath $archivePath `
                        -DryRun $DryRun `
                        -LogFile $tempLogFile
    }
}

# Heapdump cleanup
$heapdumpConfig = $xmlConfig.Housekeeping.Heapdump
$heapdumpPath = $heapdumpConfig.Path
$heapdumpRetentionDays = [int]$heapdumpConfig.RetentionDays

if ($heapdumpConfig.Enabled -eq "true") {
    $tempLogFile = "$LogFile.$([System.Guid]::NewGuid()).log"
    Write-Log "Performing heapdump cleanup for path: $heapdumpPath with retention period: $heapdumpRetentionDays days." -Level "INFO" -LogFile $tempLogFile
    Perform-Cleanup -Path $heapdumpPath -IncludeSubfolders $false `
                    -ExcludePatterns @() `
                    -RetentionDays $heapdumpRetentionDays `
                    -ArchiveBeforeDelete $false `
                    -ArchivePath "" `
                    -DryRun $DryRun `
                    -LogFile $tempLogFile
}

# Wait for all jobs to finish and merge logs
if ($Parallel) {
    if ($jobs.Count -gt 0) {
        $jobs | ForEach-Object {
            try {
                $jobResult = Wait-Job -Job $_ -ErrorAction Stop | Receive-Job -ErrorAction Stop
                Write-Log "Job completed successfully: $($_.Id)" -Level "INFO" -LogFile $LogFile
                $jobResult
                # Check if the temp log file exists before attempting to merge it
                $tempLogFile = "$LogFile.$($_.Id).log"
                if (Test-Path $tempLogFile) {
                    Get-Content $tempLogFile | Add-Content -Path $LogFile
                    Remove-Item $tempLogFile -Force
                } else {
                    Write-Log "Temp log file $tempLogFile not found." -Level "ERROR" -LogFile $LogFile
                }
            } catch {
                Write-Log "Failed to complete job $_. Error: $_" -Level "ERROR" -LogFile $LogFile
            } finally {
                Remove-Job -Job $_ -ErrorAction SilentlyContinue
            }
        }
    }
}

Write-Log "Housekeeping completed." -Level "INFO" -LogFile $LogFile
