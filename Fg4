<#
.SYNOPSIS
    This PowerShell script performs housekeeping tasks such as deleting old files, archiving files, and logging the operations.
.DESCRIPTION
    The script reads configuration settings from an XML file and performs tasks based on the provided parameters.
    It supports features like DryRun mode, excluding folders based on patterns, archiving, and respecting peak hours.
    The script logs detailed information about the operations performed and handles errors gracefully.
.PARAMETER -DryRun
    If specified, the script will simulate the housekeeping tasks without actually performing any deletions or archiving.
#>

param(
    [switch]$DryRun = $false
)

# Load XML Configuration
$xmlFilePath = "path\to\your\config.xml"
[xml]$config = Get-Content $xmlFilePath

# Initialize logging
$logFilePath = $config.HousekeepingConfig.Settings.LogFilePath
$maxLogSizeMB = [int]$config.HousekeepingConfig.Settings.MaxLogSizeMB
$logFile = New-Item -ItemType File -Path $logFilePath -Force

function Write-Log {
    param (
        [string]$message
    )
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "$timestamp - $message"
    Add-Content -Path $logFilePath -Value $logMessage
}

function Should-ProcessPath {
    param (
        [string]$path,
        [xml]$excludePatterns
    )
    foreach ($pattern in $excludePatterns.Pattern) {
        if ($path -like "*$pattern*") {
            Write-Log "Excluded path: $path (matched pattern: $pattern)"
            return $false
        }
    }
    return $true
}

function Process-Folder {
    param (
        [xml]$folderConfig
    )

    $folderPath = $folderConfig.Location
    $retentionDays = [int]$folderConfig.RetentionDays
    $includeSubfolders = [bool]$folderConfig.IncludeSubfolders
    $archiveEnabled = [bool]$folderConfig.Archive.Enabled
    $archivePath = $folderConfig.Archive.Path
    $deleteIfEmpty = [bool]$folderConfig.DeleteIfEmpty
    $excludePatterns = $folderConfig.ExcludePatterns

    Write-Log "Processing folder: $folderPath"
    Write-Log "Archive Enabled: $archiveEnabled"

    if (!(Should-ProcessPath -path $folderPath -excludePatterns $excludePatterns)) {
        Write-Log "Skipping folder: $folderPath"
        return
    }

    $files = Get-ChildItem -Path $folderPath -Recurse:$includeSubfolders
    foreach ($file in $files) {
        $fileFullPath = $file.FullName
        $fileAgeDays = ((Get-Date) - $file.LastWriteTime).Days

        Write-Log "Checking file: $fileFullPath (Age: $fileAgeDays days)"
        if ($fileAgeDays -ge $retentionDays) {
            if ($DryRun) {
                Write-Log "[DRY RUN] Would delete file: $fileFullPath"
            } else {
                Write-Log "Deleting file: $fileFullPath"
                Remove-Item -Path $fileFullPath -Force
            }
        }
    }

    if ($deleteIfEmpty) {
        $subfolders = Get-ChildItem -Path $folderPath -Directory
        foreach ($subfolder in $subfolders) {
            if ($DryRun) {
                Write-Log "[DRY RUN] Would check and possibly delete empty folder: $subfolder.FullName"
            } else {
                if ((Get-ChildItem -Path $subfolder.FullName).Count -eq 0) {
                    Write-Log "Deleting empty folder: $subfolder.FullName"
                    Remove-Item -Path $subfolder.FullName -Force
                }
            }
        }
    }
}

# Check Peak Hours
$peakHoursEnabled = [bool]$config.HousekeepingConfig.Settings.PeakHours.Enabled
$timeRanges = $config.HousekeepingConfig.Settings.PeakHours.TimeRange.Range

$now = Get-Date
$insidePeakHours = $false

if ($peakHoursEnabled) {
    foreach ($range in $timeRanges) {
        $startTime = [datetime]::ParseExact($range.Start, "HH:mm", $null)
        $endTime = [datetime]::ParseExact($range.End, "HH:mm", $null)
        
        if ($endTime -lt $startTime) {
            if ($now.TimeOfDay -ge $startTime.TimeOfDay -or $now.TimeOfDay -le $endTime.TimeOfDay) {
                $insidePeakHours = $true
                break
            }
        } else {
            if ($now.TimeOfDay -ge $startTime.TimeOfDay -and $now.TimeOfDay -le $endTime.TimeOfDay) {
                $insidePeakHours = $true
                break
            }
        }
    }
}

if ($peakHoursEnabled -and $insidePeakHours) {
    Write-Log "Current time is within peak hours. Housekeeping tasks will not be performed."
    exit
}

# Log start of housekeeping tasks
Write-Log "Starting housekeeping tasks"

# Process each folder
foreach ($folder in $config.HousekeepingConfig.Paths.Path) {
    if ([bool]$folder.Enabled) {
        Process-Folder -folderConfig $folder
    } else {
        Write-Log "Skipping disabled folder: $folder.Location"
    }
}

# Log completion of housekeeping tasks
Write-Log "Housekeeping tasks completed"

# Sleep for the configured interval
$intervalHours = [int]$config.HousekeepingConfig.Settings.CleanupIntervalHours
Write-Log "Sleeping for $intervalHours hours"
Start-Sleep -Seconds ($intervalHours * 3600)
