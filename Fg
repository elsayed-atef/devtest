[CmdletBinding()]
param (
    [string]$ConfigFile = "C:\housekeeping_config.xml"
)

# Function to load configuration from XML
function Get-Config {
    param (
        [string]$xmlPath
    )

    if (-not (Test-Path $xmlPath)) {
        throw "Configuration file not found: $xmlPath"
    }

    try {
        [xml]$xml = Get-Content $xmlPath
        return $xml.Housekeeping
    } catch {
        throw "Failed to read or parse the XML file: $_"
    }
}

# Function to log messages
function Log-Message {
    param (
        [string]$message,
        [string]$LogFile
    )
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logEntry = "$timestamp - $message"
    Add-Content -Path $LogFile -Value $logEntry
}

# Function to archive files
function Archive-File {
    param (
        [string]$filePath,
        [string]$archivePath
    )
    try {
        $archiveDir = Join-Path -Path $archivePath -ChildPath (Split-Path -Leaf $filePath)
        if (-not (Test-Path $archiveDir)) {
            New-Item -ItemType Directory -Path $archiveDir -Force
        }
        Move-Item -Path $filePath -Destination $archiveDir -Force
        Log-Message "Archived file: $filePath to $archiveDir" -LogFile $LogFile
    } catch {
        Log-Message "Failed to archive file $filePath: $_" -LogFile $LogFile
    }
}

# Function to clean folders
function Clean-Folder {
    param (
        [string]$Path,
        [int]$RetentionDays,
        [bool]$IncludeSubfolders,
        [string[]]$ExcludeFolders,
        [bool]$EnableArchive,
        [string]$ArchivePath
    )

    try {
        $currentDate = Get-Date
        $targetDate = $currentDate.AddDays(-$RetentionDays)

        $filesToDelete = Get-ChildItem -Path $Path -File -Recurse:$IncludeSubfolders |
                         Where-Object { $_.LastWriteTime -lt $targetDate } |
                         Where-Object {
                             $include = $true
                             foreach ($exclude in $ExcludeFolders) {
                                 if ($_.FullName -like "$exclude*") {
                                     $include = $false
                                     break
                                 }
                             }
                             return $include
                         }

        foreach ($file in $filesToDelete) {
            if ($DryRun) {
                Log-Message "Dry Run: Would delete file: $($file.FullName)" -LogFile $LogFile
            } else {
                if ($EnableArchive) {
                    Archive-File -filePath $file.FullName -archivePath $ArchivePath
                } else {
                    Remove-Item -Path $file.FullName -Force
                    Log-Message "Deleted file: $($file.FullName)" -LogFile $LogFile
                }
            }
        }
    } catch {
        Log-Message "Error cleaning folder $Path: $_" -LogFile $LogFile
    }
}

# Function to clean memory dumps
function Clean-MemoryDumps {
    param (
        [xml]$memoryDumpRules
    )

    try {
        foreach ($rule in $memoryDumpRules.MemoryDumpRule) {
            if ($rule.Enabled -eq 'True') {
                $path = $rule.Path
                $retentionDays = [int]$rule.RetentionDays
                $includeSubfolders = [bool]$rule.IncludeSubfolders

                if (-not (Test-Path $path)) {
                    Log-Message "Memory dump folder not found: $path" -LogFile $LogFile
                    continue
                }

                $currentDate = Get-Date
                $targetDate = $currentDate.AddDays(-$retentionDays)

                $dumpsToDelete = Get-ChildItem -Path $path -File -Recurse:$includeSubfolders |
                                 Where-Object { $_.LastWriteTime -lt $targetDate }

                foreach ($dump in $dumpsToDelete) {
                    if ($DryRun) {
                        Log-Message "Dry Run: Would delete memory dump: $($dump.FullName)" -LogFile $LogFile
                    } else {
                        Remove-Item -Path $dump.FullName -Force
                        Log-Message "Deleted memory dump: $($dump.FullName)" -LogFile $LogFile
                    }
                }
            }
        }
    } catch {
        Log-Message "Error cleaning memory dumps: $_" -LogFile $LogFile
    }
}

# Function to apply housekeeping rules
function Apply-Housekeeping {
    param (
        [xml]$config
    )
    
    try {
        $logFilePath = $config.LogFile.Path
        foreach ($rule in $config.PathRule) {
            if ($rule.Enabled -eq 'True') {
                $path = $rule.Path
                $retentionDays = [int]$rule.RetentionDays
                $includeSubfolders = [bool]$rule.IncludeSubfolders
                $excludeFolders = @()

                if ($rule.ExcludeFolders.ExcludeFolder) {
                    $excludeFolders = $rule.ExcludeFolders.ExcludeFolder | ForEach-Object { $_.InnerText }
                }

                $enableArchive = [bool]$rule.Archive.Enabled
                $archivePath = $rule.Archive.Path

                # Always clean folder, no disk space check
                Clean-Folder -Path $path -RetentionDays $retentionDays -IncludeSubfolders $includeSubfolders -ExcludeFolders $excludeFolders -EnableArchive $enableArchive -ArchivePath $archivePath
            }
        }
    } catch {
        Log-Message "Error applying housekeeping rules: $_" -LogFile $LogFile
    }
}

# Main loop
while ($true) {
    try {
        # Load configuration
        $config = Get-Config -xmlPath $ConfigFile

        # Set parameters from config
        $LogFile = if ($config.LogFile.Path) { $config.LogFile.Path } else { "D:\data\temp\housekeeping_log.txt" }
        $DryRun = [bool]$config.DryRun
        $SleepIntervalHours = [int]$config.SleepIntervalHours

        # Start the housekeeping process
        Log-Message "Starting housekeeping process" -LogFile $LogFile

        Apply-Housekeeping -config $config

        if ($config.MemoryDumpRules) {
            Clean-MemoryDumps -memoryDumpRules $config.MemoryDumpRules
        }

        Log-Message "Housekeeping process completed" -LogFile $LogFile
    } catch {
        Log-Message "Error occurred: $_" -LogFile $LogFile
    }

    # Sleep for the specified interval before the next run
    Start-Sleep -Seconds ($SleepIntervalHours * 3600)
}
