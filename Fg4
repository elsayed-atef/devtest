param (
    [switch]$DryRun
)

# Load XML Configuration
[xml]$config = Get-Content "D:\data\temp\HousekeepingConfig.xml"

# Extract Global Settings
$logFilePath = $config.HousekeepingConfig.Settings.LogFilePath
$maxLogSizeMB = $config.HousekeepingConfig.Settings.MaxLogSizeMB
$interactiveMode = [bool]$config.HousekeepingConfig.Settings.InteractiveMode

# Function to Perform Log Rotation
function Rotate-Log {
    param (
        [string]$logFilePath,
        [int]$maxLogSizeMB
    )

    if (Test-Path $logFilePath) {
        $logFileSizeMB = (Get-Item $logFilePath).Length / 1MB
        if ($logFileSizeMB -ge $maxLogSizeMB) {
            $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
            $archiveFilePath = Join-Path -Path (Split-Path $logFilePath) -ChildPath "housekeeping_$timestamp.log"
            Rename-Item $logFilePath $archiveFilePath
            Compress-Archive -Path $archiveFilePath -DestinationPath "$archiveFilePath.zip"
            Remove-Item $archiveFilePath
        }
    }
}

# Rotate the Log File if Needed
Rotate-Log -logFilePath $logFilePath -maxLogSizeMB $maxLogSizeMB

# Log the Start of the Housekeeping Script
Write-Output "Housekeeping script started at $(Get-Date)." | Out-File -FilePath $logFilePath -Append

# Function to Check Exclusions
function Is-Excluded {
    param (
        [string]$path,
        [string[]]$patterns
    )

    foreach ($pattern in $patterns) {
        if ($path -match $pattern) {
            return $true
        }
    }
    return $false
}

# Function to Perform Housekeeping
function Perform-Housekeeping {
    param (
        [string]$path,
        [int]$retentionDays,
        [bool]$includeSubfolders,
        [bool]$archiveBeforeDelete,
        [string]$archivePath,
        [bool]$prioritizeLargeFiles,
        [string[]]$excludePatterns
    )

    # Log the Start of Housekeeping for a Specific Path
    Write-Output "Starting housekeeping for $path with retention of $retentionDays days." | Out-File -FilePath $logFilePath -Append

    # Get Files to Cleanup, Prioritize Large Files if Enabled
    $files = Get-ChildItem -Path $path -Recurse:$includeSubfolders | Where-Object {
        $_.LastWriteTime -lt (Get-Date).AddDays(-$retentionDays) -and
        -not (Is-Excluded -path $_.FullName -patterns $excludePatterns)
    }

    if ($prioritizeLargeFiles) {
        $files = $files | Sort-Object Length -Descending
    }

    foreach ($file in $files) {
        if ($interactiveMode -and -not $DryRun) {
            $response = Read-Host "Do you want to delete $($file.FullName)? (Y/N)"
            if ($response -ne 'Y') {
                Write-Output "Skipped file $($file.FullName)." | Out-File -FilePath $logFilePath -Append
                continue
            }
        }

        if ($DryRun) {
            Write-Output "Dry Run: Would archive file $($file.FullName)." | Out-File -FilePath $logFilePath -Append
            Write-Output "Dry Run: Would delete file $($file.FullName)." | Out-File -FilePath $logFilePath -Append
        } else {
            if ($archiveBeforeDelete) {
                $zipPath = Join-Path -Path $archivePath -ChildPath "$($file.Name).zip"
                Compress-Archive -Path $file.FullName -DestinationPath $zipPath
                Write-Output "Archived file $($file.FullName) to $zipPath." | Out-File -FilePath $logFilePath -Append
            }

            # Delete the file
            Remove-Item $file.FullName -Force
            Write-Output "Deleted file $($file.FullName)." | Out-File -FilePath $logFilePath -Append
        }
    }

    # Log Completion of Housekeeping for the Path
    Write-Output "Completed housekeeping for $path." | Out-File -FilePath $logFilePath -Append
}

# Loop through each Path in the Configuration
foreach ($pathConfig in $config.HousekeepingConfig.Paths.Path) {
    if ($pathConfig.Enabled -eq "true") {
        Perform-Housekeeping -path $pathConfig.Location `
                            -retentionDays $pathConfig.RetentionDays `
                            -includeSubfolders $pathConfig.IncludeSubfolders `
                            -archiveBeforeDelete $pathConfig.ArchiveBeforeDelete `
                            -archivePath $pathConfig.ArchivePath `
                            -prioritizeLargeFiles $pathConfig.PrioritizeLargeFiles `
                            -excludePatterns $pathConfig.ExcludePatterns.Pattern
    } else {
        Write-Output "Skipping disabled path $($pathConfig.Location)." | Out-File -FilePath $logFilePath -Append
    }
}

# Log the End of the Housekeeping Script
Write-Output "Housekeeping script completed at $(Get-Date)." | Out-File -FilePath $logFilePath -Append
