function Invoke-Housekeeping {
    param (
        [string]$ConfigFilePath,
        [switch]$DryRun = $false
    )

    # Load the XML configuration file
    [xml]$config = Get-Content $ConfigFilePath

    # Initialize logging
    $logFilePath = $config.HousekeepingConfig.Settings.LogFilePath
    $maxLogSizeMB = [int]$config.HousekeepingConfig.Settings.MaxLogSizeMB
    Initialize-Log -LogFilePath $logFilePath -MaxLogSizeMB $maxLogSizeMB

    # Parse and log the DryRun parameter
    $dryRunFlag = $config.HousekeepingConfig.Settings.DryRun -eq 'true'
    Log-Message -Message "DryRun parameter from XML: $dryRunFlag" -Level Debug

    # Parse and log PeakHours settings
    $peakHoursEnabled = $config.HousekeepingConfig.Settings.PeakHours.Enabled -eq 'true'
    Log-Message -Message "PeakHours.Enabled from XML: $peakHoursEnabled" -Level Debug

    if ($peakHoursEnabled) {
        $timeRanges = $config.HousekeepingConfig.Settings.PeakHours.TimeRange.Range | ForEach-Object {
            [pscustomobject]@{
                Start = [datetime]::ParseExact($_.Start, "HH:mm", $null)
                End = [datetime]::ParseExact($_.End, "HH:mm", $null)
            }
        }
        $currentTime = Get-Date
        $inPeakHours = $timeRanges | Where-Object {
            ($currentTime -ge $_.Start) -and ($currentTime -le $_.End)
        }
        if ($inPeakHours) {
            Log-Message -Message "Current time ($currentTime) is within peak hours. Housekeeping will not be performed." -Level Info
            return
        }
    }

    # Process each path rule
    foreach ($pathRule in $config.HousekeepingConfig.Paths.Path) {
        $path = $pathRule.Location
        $enabled = $pathRule.Enabled -eq 'true'
        $archiveEnabled = $pathRule.Archive.Enabled -eq 'true'
        $archivePath = $pathRule.Archive.Path
        $includeSubfolders = $pathRule.IncludeSubfolders -eq 'true'
        $excludePatterns = $pathRule.ExcludePatterns.Pattern

        Log-Message -Message "Processing path: $path" -Level Info
        Log-Message -Message "Enabled: $enabled, Archive.Enabled: $archiveEnabled, IncludeSubfolders: $includeSubfolders" -Level Debug
        Log-Message -Message "ExcludePatterns: $($excludePatterns -join ', ')" -Level Debug

        if (-not $enabled) {
            Log-Message -Message "Skipping path $path as it is not enabled." -Level Info
            continue
        }

        if ($archiveEnabled) {
            Log-Message -Message "Archiving enabled for path: $path. Archive Path: $archivePath" -Level Info
            # (Add your archiving logic here)
        }

        # (Add your housekeeping logic here, e.g., deleting files, handling retention periods)

        if ($DryRun) {
            Log-Message -Message "DryRun is enabled. No actual changes will be made." -Level Info
        }
    }

    Log-Message -Message "Housekeeping tasks completed." -Level Info

    # Sleep for the specified interval if running in a loop
    $cleanupIntervalHours = [int]$config.HousekeepingConfig.Settings.CleanupIntervalHours
    Start-Sleep -Seconds ($cleanupIntervalHours * 3600)
}

function Initialize-Log {
    param (
        [string]$LogFilePath,
        [int]$MaxLogSizeMB
    )

    if (Test-Path $LogFilePath) {
        $logFileInfo = Get-Item $LogFilePath
        if ($logFileInfo.Length -gt ($MaxLogSizeMB * 1MB)) {
            $timestamp = Get-Date -Format "yyyyMMddHHmmss"
            $archivedLogFilePath = "$($logFileInfo.DirectoryName)\$($logFileInfo.BaseName)_$timestamp$($logFileInfo.Extension)"
            Move-Item -Path $LogFilePath -Destination $archivedLogFilePath
        }
    }
    New-Item -ItemType File -Path $LogFilePath -Force | Out-Null
}

function Log-Message {
    param (
        [string]$Message,
        [ValidateSet("Info", "Debug", "Error")] [string]$Level = "Info"
    )

    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logEntry = "[$timestamp] [$Level] $Message"
    Add-Content -Path $logFilePath -Value $logEntry
}

# Execute housekeeping with the provided configuration file
$ConfigFilePath = "C:\path\to\your\config.xml"
Invoke-Housekeeping -ConfigFilePath $ConfigFilePath -DryRun
