param (
    [string]$ConfigFile = "D:\data\housekeeping_config.xml",
    [switch]$Parallel,
    [switch]$DryRun,
    [string]$LogFile = "D:\data\temp\housekeeping.log"
)

# Import the XML configuration
$xmlConfig = [xml](Get-Content $ConfigFile)

# Mutex for log file access synchronization
$logMutex = New-Object System.Threading.Mutex($false, "Global\HousekeepingLogMutex")

# Function to write to logfile only
function Write-Log {
    param (
        [string]$Message,
        [string]$Level = "INFO"
    )
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "$timestamp [$Level] $Message"

    # Wait for the mutex, then write to the log file
    $logMutex.WaitOne()
    try {
        Add-Content -Path $LogFile -Value $logMessage
    } finally {
        $logMutex.ReleaseMutex()
    }
}

# Function to perform cleanup
function Perform-Cleanup {
    param (
        [string]$Path,
        [bool]$IncludeSubfolders,
        [string[]]$ExcludePatterns,
        [int]$RetentionDays,
        [bool]$ArchiveBeforeDelete,
        [string]$ArchivePath,
        [switch]$DryRun,
        [string]$LogFile
    )

    Write-Log "Starting cleanup for path: $Path with retention period: $RetentionDays days." -Level "INFO"

    # Calculate retention date
    $RetentionDate = (Get-Date).AddDays(-$RetentionDays)

    # Get files to delete
    $files = Get-ChildItem -Path $Path -Recurse:$IncludeSubfolders -ErrorAction Stop | 
             Where-Object { $_.LastWriteTime -lt $RetentionDate }

    if ($ExcludePatterns) {
        foreach ($pattern in $ExcludePatterns) {
            Write-Log "Excluding files matching pattern: $pattern" -Level "DEBUG"
            $files = $files | Where-Object { $_.FullName -notmatch $pattern }
        }
    }

    if ($DryRun) {
        Write-Log "DryRun mode enabled. No files will be deleted or moved." -Level "DEBUG"
        Write-Log "Files that would be processed:" -Level "DEBUG"
        $files | ForEach-Object { Write-Log $_.FullName -Level "DEBUG" }
        return
    }

    # Archive files if required
    if ($ArchiveBeforeDelete -and $ArchivePath) {
        Write-Log "Archiving files before deletion to $ArchivePath." -Level "INFO"
        foreach ($file in $files) {
            $dest = Join-Path -Path $ArchivePath -ChildPath $file.FullName.TrimStart($Path)
            $destDir = Split-Path $dest
            if (-not (Test-Path $destDir)) {
                New-Item -Path $destDir -ItemType Directory | Out-Null
                Write-Log "Created directory: $destDir" -Level "DEBUG"
            }
            Move-Item -Path $file.FullName -Destination $dest
            Write-Log "Moved $($file.FullName) to $dest" -Level "DEBUG"
        }
    }

    # Report before deletion
    $initialSize = ($files | Measure-Object -Property Length -Sum).Sum / 1MB
    Write-Log "Initial size of files to be deleted: $([math]::round($initialSize, 2)) MB" -Level "INFO"

    # Delete files
    $deletedCount = 0
    foreach ($file in $files) {
        Remove-Item -Path $file.FullName -Force -ErrorAction Stop
        Write-Log "Deleted $($file.FullName)" -Level "DEBUG"
        $deletedCount++
    }

    # Report after deletion
    Write-Log "Deleted $deletedCount files." -Level "INFO"
    $finalSize = (Get-ChildItem -Path $Path -Recurse:$IncludeSubfolders -ErrorAction Stop | Measure-Object -Property Length -Sum).Sum / 1MB
    Write-Log "Final size after deletion: $([math]::round($finalSize, 2)) MB" -Level "INFO"
}

# Sort paths to ensure subfolders are processed before parent folders
$sortedPaths = $xmlConfig.Housekeeping.Paths.Path | Sort-Object -Property { $_.Path.Length } -Descending

$jobs = @()

# Process each path configuration
foreach ($pathConfig in $sortedPaths) {
    $path = $pathConfig.Path
    $enabled = [bool]$pathConfig.Enabled
    $includeSubfolders = [bool]$pathConfig.IncludeSubfolders
    $excludePatterns = $pathConfig.ExcludePatterns.Pattern
    $retentionDays = [int]$pathConfig.RetentionDays
    $archiveBeforeDelete = [bool]$pathConfig.ArchiveBeforeDelete
    $archivePath = $pathConfig.ArchivePath

    if ($enabled) {
        Write-Log "Processing path: $path" -Level "INFO"
        if ($Parallel) {
            $job = Start-Job -InitializationScript {
                # Use Mutex for synchronized logging
                $logMutex = [System.Threading.Mutex]::OpenExisting("Global\HousekeepingLogMutex")
                
                function Write-Log {
                    param (
                        [string]$Message,
                        [string]$Level = "INFO"
                    )
                    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                    $logMessage = "$timestamp [$Level] $Message"

                    $logMutex.WaitOne()
                    try {
                        Add-Content -Path $using:LogFile -Value $logMessage
                    } finally {
                        $logMutex.ReleaseMutex()
                    }
                }

                function Perform-Cleanup {
                    param (
                        [string]$Path,
                        [bool]$IncludeSubfolders,
                        [string[]]$ExcludePatterns,
                        [int]$RetentionDays,
                        [bool]$ArchiveBeforeDelete,
                        [string]$ArchivePath,
                        [switch]$DryRun,
                        [string]$LogFile
                    )

                    Write-Log "Starting cleanup for path: $Path with retention period: $RetentionDays days." -Level "INFO"

                    # Calculate retention date
                    $RetentionDate = (Get-Date).AddDays(-$RetentionDays)

                    # Get files to delete
                    $files = Get-ChildItem -Path $Path -Recurse:$IncludeSubfolders -ErrorAction Stop | 
                             Where-Object { $_.LastWriteTime -lt $RetentionDate }

                    if ($ExcludePatterns) {
                        foreach ($pattern in $ExcludePatterns) {
                            Write-Log "Excluding files matching pattern: $pattern" -Level "DEBUG"
                            $files = $files | Where-Object { $_.FullName -notmatch $pattern }
                        }
                    }

                    if ($DryRun) {
                        Write-Log "DryRun mode enabled. No files will be deleted or moved." -Level "DEBUG"
                        Write-Log "Files that would be processed:" -Level "DEBUG"
                        $files | ForEach-Object { Write-Log $_.FullName -Level "DEBUG" }
                        return
                    }

                    # Archive files if required
                    if ($ArchiveBeforeDelete -and $ArchivePath) {
                        Write-Log "Archiving files before deletion to $ArchivePath." -Level "INFO"
                        foreach ($file in $files) {
                            $dest = Join-Path -Path $ArchivePath -ChildPath $file.FullName.TrimStart($Path)
                            $destDir = Split-Path $dest
                            if (-not (Test-Path $destDir)) {
                                New-Item -Path $destDir -ItemType Directory | Out-Null
                                Write-Log "Created directory: $destDir" -Level "DEBUG"
                            }
                            Move-Item -Path $file.FullName -Destination $dest
                            Write-Log "Moved $($file.FullName) to $dest" -Level "DEBUG"
                        }
                    }

                    # Report before deletion
                    $initialSize = ($files | Measure-Object -Property Length -Sum).Sum / 1MB
                    Write-Log "Initial size of files to be deleted: $([math]::round($initialSize, 2)) MB" -Level "INFO"

                    # Delete files
                    $deletedCount = 0
                    foreach ($file in $files) {
                        Remove-Item -Path $file.FullName -Force -ErrorAction Stop
                        Write-Log "Deleted $($file.FullName)" -Level "DEBUG"
                        $deletedCount++
                    }

                    # Report after deletion
                    Write-Log "Deleted $deletedCount files." -Level "INFO"
                    $finalSize = (Get-ChildItem -Path $Path -Recurse:$IncludeSubfolders -ErrorAction Stop | Measure-Object -Property Length -Sum).Sum / 1MB
                    Write-Log "Final size after deletion: $([math]::round($finalSize, 2)) MB" -Level "INFO"
                }
            } -ScriptBlock {
                Perform-Cleanup -Path $using:path -IncludeSubfolders $using:includeSubfolders `
                               -ExcludePatterns $using:excludePatterns `
                               -RetentionDays $using:retentionDays `
                               -ArchiveBeforeDelete $using:archiveBeforeDelete `
                               -ArchivePath $using:archivePath `
                               -DryRun:$using:DryRun `
                               -LogFile $using:LogFile
            }
            $jobs += $job
        } else {
            Perform-Cleanup -Path $path -IncludeSubfolders $includeSubfolders `
                            -ExcludePatterns $excludePatterns `
                            -RetentionDays $retentionDays `
                            -ArchiveBeforeDelete $archiveBeforeDelete `
                            -ArchivePath $archivePath `
                            -DryRun:$DryRun `
                            -LogFile $LogFile
        }
    }
}

# Heapdump cleanup
$heapdumpConfig = $xmlConfig.Housekeeping.Heapdump
$heapdumpPath = $heapdumpConfig.Path
$heapdumpRetentionDays = [int]$heapdumpConfig.RetentionDays

if ($heapdumpConfig.Enabled -eq "true") {
    Write-Log "Performing heapdump cleanup for path: $heapdumpPath with retention period: $heapdumpRetentionDays days." -Level "INFO"
    Perform-Cleanup -Path $heapdumpPath -IncludeSubfolders $false `
                    -ExcludePatterns @() `
                    -RetentionDays $heapdumpRetentionDays `
                    -ArchiveBeforeDelete $false `
                    -ArchivePath "" `
                    -DryRun:$DryRun `
                    -LogFile $LogFile
}

# Wait for all jobs to finish
if ($Parallel) {
    if ($jobs.Count -gt 0) {
        $jobs | Wait-Job | Receive-Job | Remove-Job
    }
}

Write-Log "Housekeeping completed." -Level "INFO" -LogFile $LogFile

Stop-Transcript
