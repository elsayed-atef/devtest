# Function to Log Messages with Timestamp and Log Level
function Log-Message {
    param (
        [string]$Level,
        [string]$Message
    )

    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logEntry = "$timestamp [$Level] $Message"
    Write-Output $logEntry
    Add-Content -Path $LogFilePath -Value $logEntry
}

# Function to Check if Current Time is Within Peak Hours
function Is-In-PeakHours {
    param (
        [datetime]$currentTime,
        [array]$timeRanges
    )

    foreach ($range in $timeRanges) {
        $startTime = [datetime]::ParseExact($range.Start, "HH:mm", $null)
        $endTime = [datetime]::ParseExact($range.End, "HH:mm", $null)

        # Log parsed time ranges
        Log-Message -Level "Debug" -Message "Parsed time range: Start $($startTime.ToString("HH:mm:ss")), End $($endTime.ToString("HH:mm:ss"))"

        if ($currentTime.TimeOfDay -ge $startTime.TimeOfDay -and $currentTime.TimeOfDay -lt $endTime.TimeOfDay) {
            return $true
        }
    }
    return $false
}

# Function to Perform Housekeeping Tasks
function Perform-Housekeeping {
    param (
        [xml]$config,
        [bool]$DryRun
    )

    foreach ($folder in $config.HousekeepingConfig.Paths.Path) {
        $path = $folder.Location
        $retentionDays = [int]$folder.RetentionDays
        $includeSubfolders = [bool]$folder.IncludeSubfolders
        $archiveEnabled = [bool]$folder.Archive.Enabled
        $archivePath = $folder.Archive.Path

        # Log folder processing details
        Log-Message -Level "Info" -Message "Processing folder: $path"
        Log-Message -Level "Debug" -Message "Retention Days: $retentionDays, Include Subfolders: $includeSubfolders, Archive Enabled: $archiveEnabled, Archive Path: $archivePath"

        # Get files and apply retention policy
        $files = Get-ChildItem -Path $path -Recurse:$includeSubfolders -File

        foreach ($file in $files) {
            $fileAge = (Get-Date) - $file.LastWriteTime

            if ($fileAge.Days -gt $retentionDays) {
                if ($DryRun) {
                    Log-Message -Level "Info" -Message "Dry Run: Would delete $($file.FullName)"
                } else {
                    Log-Message -Level "Info" -Message "Deleting $($file.FullName)"
                    Remove-Item -Path $file.FullName -Force
                }

                if ($archiveEnabled) {
                    if ($DryRun) {
                        Log-Message -Level "Info" -Message "Dry Run: Would archive $($file.FullName) to $archivePath"
                    } else {
                        $archiveFile = Join-Path -Path $archivePath -ChildPath $file.Name
                        Log-Message -Level "Info" -Message "Archiving $($file.FullName) to $archiveFile"
                        Move-Item -Path $file.FullName -Destination $archiveFile
                    }
                }
            }
        }

        # Check if the folder is empty and delete if necessary
        if ($folder.DeleteIfEmpty -and (Get-ChildItem -Path $path).Count -eq 0) {
            if ($DryRun) {
                Log-Message -Level "Info" -Message "Dry Run: Would delete empty folder $path"
            } else {
                Log-Message -Level "Info" -Message "Deleting empty folder $path"
                Remove-Item -Path $path -Recurse
            }
        }
    }
}

# Main Loop
while ($true) {
    # Load XML Configuration
    $config = [xml](Get-Content "HousekeepingConfig.xml")

    # Extract global settings from XML
    $LogFilePath = $config.HousekeepingConfig.Settings.LogFilePath
    $MaxLogSizeMB = [int]$config.HousekeepingConfig.Settings.MaxLogSizeMB
    $cleanupIntervalHours = [int]$config.HousekeepingConfig.Settings.CleanupIntervalHours
    $DryRun = [bool]$config.HousekeepingConfig.Settings.DryRun

    # Log extracted settings
    Log-Message -Level "Debug" -Message "LogFilePath: $LogFilePath, MaxLogSizeMB: $MaxLogSizeMB, CleanupIntervalHours: $cleanupIntervalHours, DryRun: $DryRun"

    # Check if Peak Hours are Enabled and If the Script Needs to Sleep Until Peak Hours End
    $currentTime = Get-Date
    $peakHoursEnabled = [bool]$config.HousekeepingConfig.Settings.PeakHours.Enabled
    $sleepUntilPeakHoursEnd = [bool]$config.HousekeepingConfig.Settings.PeakHours.SleepUntilEnd
    $timeRanges = @($config.HousekeepingConfig.Settings.PeakHours.TimeRange.Range)

    Log-Message -Level "Debug" -Message "Peak Hours Enabled: $peakHoursEnabled, Sleep Until End: $sleepUntilPeakHoursEnd"

    if ($peakHoursEnabled -and (Is-In-PeakHours -currentTime $currentTime -timeRanges $timeRanges)) {
        if ($sleepUntilPeakHoursEnd) {
            # Calculate the remaining sleep time until the end of the peak hours
            $endPeakHours = $timeRanges | Where-Object {
                $endTime = [datetime]::ParseExact($_.End, "HH:mm", $null)
                $endTime.TimeOfDay -gt $currentTime.TimeOfDay
            } | Sort-Object Start | Select-Object -First 1

            if ($endPeakHours) {
                $endTimePeak = [datetime]::ParseExact($endPeakHours.End, "HH:mm", $null)
                $sleepTime = ($endTimePeak.TimeOfDay - $currentTime.TimeOfDay).TotalMinutes
                Log-Message -Level "Info" -Message "Sleeping until peak hours end. Sleeping for $sleepTime minutes."
                Start-Sleep -Seconds ([math]::Round($sleepTime * 60))
                continue
            }
        }
    }

    # Perform Housekeeping
    Log-Message -Level "Info" -Message "Starting housekeeping tasks..."
    Perform-Housekeeping -config $config -DryRun $DryRun
    Log-Message -Level "Info" -Message "Completed housekeeping tasks."

    # Log rotation check
    if ((Get-Item $LogFilePath).Length -gt ($MaxLogSizeMB * 1MB)) {
        Rename-Item -Path $LogFilePath -NewName "$LogFilePath.$(Get-Date -Format 'yyyyMMddHHmmss').log"
        Log-Message -Level "Info" -Message "Log file rotated."
    }

    # Sleep for configured interval
    Log-Message -Level "Info" -Message "Sleeping for $cleanupIntervalHours hours."
    Start-Sleep -Seconds ($cleanupIntervalHours * 3600)
}
