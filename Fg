# Function to apply housekeeping rules
function Apply-Housekeeping {
    param (
        [xml]$config
    )

    try {
        $logFilePath = $config.Housekeeping.LogFile.Path
        Log-Message -message "Applying housekeeping rules from config." -LogFile $logFilePath

        foreach ($rule in $config.Housekeeping.PathRules.PathRule) {
            Log-Message -message "Processing rule for path: $($rule.Path)" -LogFile $logFilePath

            # Handle ExcludeFolders
            $excludeFolders = @()
            if ($rule.ExcludeFolders -and $rule.ExcludeFolders.ExcludeFolder) {
                foreach ($folder in $rule.ExcludeFolders.ExcludeFolder) {
                    if ($folder -and $folder -ne "") {
                        $excludeFolders += $folder
                    }
                }
            }

            if ($excludeFolders.Count -gt 0) {
                Log-Message -message "Exclude Folders: $($excludeFolders -join ', ')" -LogFile $logFilePath
            } else {
                Log-Message -message "Exclude Folders: None" -LogFile $logFilePath
            }

            # Continue with the rest of the housekeeping logic
            Log-Message -message "Rule Details: $(($rule | Out-String).Trim())" -LogFile $logFilePath
        }

        foreach ($memoryDumpRule in $config.Housekeeping.MemoryDumpRules.MemoryDumpRule) {
            Log-Message -message "Processing memory dump rule for path: $($memoryDumpRule.Path)" -LogFile $logFilePath
            Log-Message -message "Memory Dump Rule Details: $(($memoryDumpRule | Out-String).Trim())" -LogFile $logFilePath
        }

    } catch {
        Log-Message -message "Error applying housekeeping rules: $_" -LogFile $logFilePath
    }
}
