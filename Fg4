param (
    [string]$ConfigFile = "D:\data\housekeeping_config.xml",
    [switch]$Parallel,
    [switch]$DryRun,
    [string]$MainLogFile = "D:\data\temp\housekeeping.log"
)

# Function to write logs
function Write-Log {
    param (
        [string]$Message,
        [string]$Level = "INFO",
        [string]$LogFile
    )

    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "$timestamp [$Level] $Message"

    [System.IO.File]::AppendAllText($LogFile, "$logMessage`r`n")
}

# Function to perform cleanup
function Perform-Cleanup {
    param (
        [string]$Path,
        [bool]$IncludeSubfolders,
        [string[]]$ExcludePatterns,
        [int]$RetentionDays,
        [bool]$ArchiveBeforeDelete,
        [string]$ArchivePath,
        [switch]$DryRun,
        [string]$LogFile
    )

    Write-Log "Starting cleanup for path: $Path with retention period: $RetentionDays days." -Level "INFO" -LogFile $LogFile

    $RetentionDate = (Get-Date).AddDays(-$RetentionDays)
    $files = Get-ChildItem -Path $Path -Recurse:$IncludeSubfolders -ErrorAction Stop | 
             Where-Object { $_.LastWriteTime -lt $RetentionDate }

    if ($ExcludePatterns) {
        foreach ($pattern in $ExcludePatterns) {
            Write-Log "Excluding files matching pattern: $pattern" -Level "DEBUG" -LogFile $LogFile
            $files = $files | Where-Object { $_.FullName -notmatch $pattern }
        }
    }

    if ($DryRun) {
        Write-Log "DryRun mode enabled. No files will be deleted or moved." -Level "DEBUG" -LogFile $LogFile
        Write-Log "Files that would be processed:" -Level "DEBUG" -LogFile $LogFile
        $files | ForEach-Object { Write-Log $_.FullName -Level "DEBUG" -LogFile $LogFile }
        return
    }

    if ($ArchiveBeforeDelete -and $ArchivePath) {
        Write-Log "Archiving files before deletion to $ArchivePath." -Level "INFO" -LogFile $LogFile
        foreach ($file in $files) {
            $dest = Join-Path -Path $ArchivePath -ChildPath $file.FullName.TrimStart($Path)
            $destDir = Split-Path $dest
            if (-not (Test-Path $destDir)) {
                New-Item -Path $destDir -ItemType Directory | Out-Null
                Write-Log "Created directory: $destDir" -Level "DEBUG" -LogFile $LogFile
            }
            Move-Item -Path $file.FullName -Destination $dest
            Write-Log "Moved $($file.FullName) to $dest" -Level "DEBUG" -LogFile $LogFile
        }
    }

    $initialSize = ($files | Measure-Object -Property Length -Sum).Sum / 1MB
    Write-Log "Initial size of files to be deleted: $([math]::round($initialSize, 2)) MB" -Level "INFO" -LogFile $LogFile

    $deletedCount = 0
    foreach ($file in $files) {
        Remove-Item -Path $file.FullName -Force -ErrorAction Stop
        Write-Log "Deleted $($file.FullName)" -Level "DEBUG" -LogFile $LogFile
        $deletedCount++
    }

    Write-Log "Deleted $deletedCount files." -Level "INFO" -LogFile $LogFile
    $finalSize = (Get-ChildItem -Path $Path -Recurse:$IncludeSubfolders -ErrorAction Stop | Measure-Object -Property Length -Sum).Sum / 1MB
    Write-Log "Final size after deletion: $([math]::round($finalSize, 2)) MB" -Level "INFO" -LogFile $LogFile
}

# Import the XML configuration
[xml]$xmlConfig = Get-Content $ConfigFile

# Process each path configuration
foreach ($pathConfig in $xmlConfig.Housekeeping.Paths.Path) {
    $path = $pathConfig.Path
    $enabled = $pathConfig.Enabled -eq "true"
    $includeSubfolders = [bool]$pathConfig.IncludeSubfolders
    $excludePatterns = $pathConfig.ExcludePatterns.Pattern
    $retentionDays = [int]$pathConfig.RetentionDays
    $archiveBeforeDelete = [bool]$pathConfig.ArchiveBeforeDelete
    $archivePath = $pathConfig.ArchivePath

    $JobLogFile = [System.IO.Path]::Combine("D:\data\temp\logs", "$($path.GetHashCode()).log")

    Write-Log "Processing path: $path" -Level "DEBUG" -LogFile $MainLogFile
    Write-Log "Enabled flag for $path is set to $enabled" -Level "DEBUG" -LogFile $MainLogFile

    if (-not $enabled) {
        Write-Log "Skipping disabled rule for path: $path" -Level "INFO" -LogFile $MainLogFile
        continue
    }

    if ($Parallel) {
        Start-Job -ScriptBlock {
            param (
                $Path,
                $IncludeSubfolders,
                $ExcludePatterns,
                $RetentionDays,
                $ArchiveBeforeDelete,
                $ArchivePath,
                $DryRun,
                $JobLogFile
            )

            . "D:\scripts\Perform-Cleanup.ps1" -Path $Path -IncludeSubfolders $IncludeSubfolders `
                                                -ExcludePatterns $ExcludePatterns `
                                                -RetentionDays $RetentionDays `
                                                -ArchiveBeforeDelete $ArchiveBeforeDelete `
                                                -ArchivePath $ArchivePath `
                                                -DryRun $DryRun `
                                                -LogFile $JobLogFile
        } -ArgumentList $path, $includeSubfolders, $excludePatterns, $retentionDays, $archiveBeforeDelete, $archivePath, $DryRun, $JobLogFile
        Write-Log "Started job for path: $path with log file $JobLogFile" -Level "INFO" -LogFile $MainLogFile
    } else {
        . "D:\scripts\Perform-Cleanup.ps1" -Path $path -IncludeSubfolders $includeSubfolders `
                                            -ExcludePatterns $excludePatterns `
                                            -RetentionDays $retentionDays `
                                            -ArchiveBeforeDelete $archiveBeforeDelete `
                                            -ArchivePath $archivePath `
                                            -DryRun $DryRun `
                                            -LogFile $JobLogFile
    }
}

# Wait for all parallel jobs to complete
if ($Parallel) {
    Get-Job | ForEach-Object {
        try {
            $jobResult = Wait-Job -Job $_ -ErrorAction Stop | Receive-Job -ErrorAction Stop
            Write-Log "Job completed successfully: $($_.Id)" -Level "INFO" -LogFile $MainLogFile
            $jobResult
        } catch {
            Write-Log "Failed to complete job $_. Error: $_" -Level "ERROR" -LogFile $MainLogFile
        } finally {
            Remove-Job -Job $_ -ErrorAction SilentlyContinue
        }
    }
}

Write-Log "Housekeeping completed." -Level "INFO" -LogFile $MainLogFile
