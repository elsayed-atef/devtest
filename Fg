function Initialize-Log {
    param (
        [string]$LogFilePath,
        [int]$MaxLogSizeMB
    )

    if (Test-Path $LogFilePath) {
        $logFileInfo = Get-Item $LogFilePath
        if ($logFileInfo.Length -gt ($MaxLogSizeMB * 1MB)) {
            $timestamp = Get-Date -Format "yyyyMMddHHmmss"
            $archivedLogFilePath = "$($logFileInfo.DirectoryName)\$($logFileInfo.BaseName)_$timestamp$($logFileInfo.Extension)"
            Move-Item -Path $LogFilePath -Destination $archivedLogFilePath
        }
    }
    New-Item -ItemType File -Path $LogFilePath -Force | Out-Null
}

function Log-Message {
    param (
        [string]$Message,
        [ValidateSet("Info", "Debug", "Error")] [string]$Level = "Info"
    )

    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logEntry = "[$timestamp] [$Level] $Message"
    Add-Content -Path $logFilePath -Value $logEntry
}

function Process-Path {
    param (
        [string]$PathLocation,
        [int]$RetentionDays,
        [bool]$IncludeSubfolders,
        [bool]$DeleteIfEmpty,
        [bool]$ArchiveEnabled,
        [string]$ArchivePath,
        [string[]]$ExcludePatterns
    )

    Log-Message -Message "Processing path: $PathLocation" -Level Info
    Log-Message -Message "Retention Days: $RetentionDays, Include Subfolders: $IncludeSubfolders, Delete If Empty: $DeleteIfEmpty, Archive Enabled: $ArchiveEnabled" -Level Debug
    Log-Message -Message "Archive Path: $ArchivePath" -Level Debug
    Log-Message -Message "Exclude Patterns: $($ExcludePatterns -join ', ')" -Level Debug

    # Implement the actual housekeeping logic here
    # This is a placeholder example
    if (Test-Path $PathLocation) {
        # Implement the logic to handle files and folders, respecting exclude patterns and other parameters
    }
}

function Run-Housekeeping {
    param (
        [string]$ConfigFilePath
    )

    # Load the XML configuration file
    [xml]$config = Get-Content $ConfigFilePath

    # Initialize logging
    $logFilePath = $config.HousekeepingConfig.Settings.LogFilePath
    $maxLogSizeMB = [int]$config.HousekeepingConfig.Settings.MaxLogSizeMB
    Initialize-Log -LogFilePath $logFilePath -MaxLogSizeMB $maxLogSizeMB

    # Peak Hours Processing
    $peakHoursEnabled = $config.HousekeepingConfig.Settings.PeakHours.Enabled -eq 'true'
    Log-Message -Message "Peak Hours Enabled: $peakHoursEnabled" -Level Debug

    if ($peakHoursEnabled) {
        $currentTime = Get-Date
        $peakHours = $config.HousekeepingConfig.Settings.PeakHours.TimeRange.Range

        $inPeakHours = $false
        foreach ($range in $peakHours) {
            $start = [datetime]::ParseExact($range.Start, 'HH:mm', $null)
            $end = [datetime]::ParseExact($range.End, 'HH:mm', $null)

            if ($end -lt $start) {
                $end = $end.AddDays(1)  # Adjust end time if it is on the next day
            }

            if ($currentTime.TimeOfDay -ge $start.TimeOfDay -and $currentTime.TimeOfDay -le $end.TimeOfDay) {
                $inPeakHours = $true
                break
            }
        }

        if ($inPeakHours) {
            Log-Message -Message "Current time is within peak hours." -Level Info
        } else {
            Log-Message -Message "Current time is outside peak hours or peak hours are not enabled." -Level Info
            return
        }
    } else {
        Log-Message -Message "Peak Hours are not enabled." -Level Info
    }

    # Process paths
    foreach ($path in $config.HousekeepingConfig.Paths.Path) {
        $location = $path.Location
        $enabled = $path.Enabled -eq 'true'
        $includeSubfolders = $path.IncludeSubfolders -eq 'true'
        $deleteIfEmpty = $path.DeleteIfEmpty -eq 'true'
        $archiveEnabled = $path.Archive.Enabled -eq 'true'
        $archivePath = $path.Archive.Path
        $excludePatterns = $path.ExcludePatterns.Pattern | ForEach-Object { $_.Trim() }

        # Log path rule details
        Log-Message -Message "Processing path rule:" -Level Info
        Log-Message -Message "Location: $location" -Level Debug
        Log-Message -Message "Enabled: $enabled" -Level Debug
        Log-Message -Message "Include Subfolders: $includeSubfolders" -Level Debug
        Log-Message -Message "Delete If Empty: $deleteIfEmpty" -Level Debug
        Log-Message -Message "Archive Enabled: $archiveEnabled" -Level Debug
        Log-Message -Message "Archive Path: $archivePath" -Level Debug
        Log-Message -Message "Exclude Patterns: $($excludePatterns -join ', ')" -Level Debug

        if ($enabled) {
            Process-Path -PathLocation $location -RetentionDays $path.RetentionDays -IncludeSubfolders $includeSubfolders -DeleteIfEmpty $deleteIfEmpty -ArchiveEnabled $archiveEnabled -ArchivePath $archivePath -ExcludePatterns $excludePatterns
        }
    }

    # Sleep before the next iteration
    $intervalHours = [int]$config.HousekeepingConfig.Settings.CleanupIntervalHours
    Log-Message -Message "Sleeping for $intervalHours hours." -Level Info
    Start-Sleep -Seconds ($intervalHours * 3600)
}

# Path to the configuration XML file
$ConfigFilePath = "C:\path\to\your\config.xml"

# Run the housekeeping process
Run-Housekeeping -ConfigFilePath $ConfigFilePath
